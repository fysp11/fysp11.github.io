import { useState } from 'react';

export default function Generator() {
  const [prompt, setPrompt] = useState('');
  const [story, setStory] = useState('');
  const [imageBase64, setImageBase64] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [activeGeneration, setActiveGeneration] = useState<'story' | 'image' | null>(null);

  const handleGenerateStory = async () => {
    if (!prompt) {
      alert('Please enter a prompt.');
      return;
    }

    setIsLoading(true);
    setActiveGeneration('story');
    setStory('');
    setImageBase64(''); // Clear previous image

    try {
      const response = await fetch('/api/ai/generate-story', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });

      if (!response.body) {
        throw new Error('No response body');
      }

      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value);
        setStory(prev => prev + chunk);
      }
    } catch (error) {
      console.error('Error generating story:', error);
      setStory('Sorry, something went wrong while generating the story.');
    } finally {
      setIsLoading(false);
      setActiveGeneration(null);
    }
  };

  const handleGenerateImage = async () => {
    if (!prompt) {
      alert('Please enter a prompt.');
      return;
    }

    setIsLoading(true);
    setActiveGeneration('image');
    setImageBase64('');
    setStory(''); // Clear previous story

    try {
      const response = await fetch('/api/ai/generate-image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });

      const { imageBase64 } = await response.json();
      setImageBase64(imageBase64);

    } catch (error) {
      console.error('Error generating image:', error);
      // You might want to display this error to the user
    } finally {
      setIsLoading(false);
      setActiveGeneration(null);
    }
  };

  return (
    <div className="max-w-2xl mx-auto">
      <div className="mb-8">
        <label htmlFor="prompt-input" className="block text-lg font-medium text-gray-700 mb-2">Your Prompt</label>
        <textarea
          id="prompt-input"
          rows={3}
          className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-accent focus:border-accent transition-all"
          placeholder="A brave knight on a quest to find a legendary sword..."
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
        />
      </div>

      <div className="flex justify-center gap-4 mb-12">
        <button
          onClick={handleGenerateStory}
          disabled={isLoading}
          className="px-6 py-3 bg-primary text-white font-semibold rounded-lg shadow-md hover:bg-opacity-90 transition-transform transform hover:scale-105 disabled:bg-gray-400 disabled:scale-100"
        >
          Generate Story
        </button>
        <button
          onClick={handleGenerateImage}
          disabled={isLoading}
          className="px-6 py-3 bg-accent text-primary font-semibold rounded-lg shadow-md hover:bg-opacity-90 transition-transform transform hover:scale-105 disabled:bg-gray-400 disabled:scale-100"
        >
          Generate Image
        </button>
      </div>

      {isLoading && (
        <div className="text-center my-8">
          <p className="text-lg text-gray-600 animate-pulse">Generating {activeGeneration}...</p>
        </div>
      )}

      <div className="space-y-12">
        {story && (
          <div className="p-6 bg-white rounded-lg shadow-lg border border-gray-200">
            <h2 className="text-2xl font-bold mb-4 text-primary">Your Story</h2>
            <div className="prose prose-lg max-w-none text-gray-700">{story}</div>
          </div>
        )}

        {imageBase64 && (
          <div className="p-6 bg-white rounded-lg shadow-lg border border-gray-200">
            <h2 className="text-2xl font-bold mb-4 text-primary">Your Image</h2>
            <div className="flex justify-center">
              <img src={`data:image/png;base64,${imageBase64}`} alt="Generated by AI" className="rounded-lg max-w-full h-auto" />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
