---
import { getCollection, render, type CollectionEntry } from 'astro:content';
import ProjectLayout from '@/layouts/ProjectLayout.astro';
import SpaceCatScene from '@/components/scenes/SpaceCatScene.tsx';
import Generator from '@/components/ai/Generator.tsx';

export const prerender = true;

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  const activeProjects = projects.filter((p: CollectionEntry<'projects'>) => p.data.active);
  return activeProjects.map((project: CollectionEntry<'projects'>) => ({
    params: { slug: project.data.slug },
  }));
}

const { slug } = Astro.params;
const allProjects = await getCollection('projects');
const project = allProjects.find((p: CollectionEntry<'projects'>) => p.data.slug === slug);

if (!project) {
  return new Response(null, { status: 404 });
}
const { Content } = await render(project);

const projectDemos = {
  '3d': SpaceCatScene,
  'ai': Generator,
};

const DemoComponent = projectDemos[project.slug as keyof typeof projectDemos];
---

<ProjectLayout frontmatter={project.data}>
  <Content />
  {DemoComponent && (
    <div class="mt-8 border-t border-border pt-8">
      <h2 class="text-3xl font-bold tracking-tighter mb-4">Live Demo</h2>
      <DemoComponent client:visible />
    </div>
  )}
</ProjectLayout>
